# FOR DEVELOPMENT PURPOSES ONLY
name: biofood-dev

services:
  database:
    container_name: biofood-database
    image: postgres:13-alpine
    volumes:
      - ./create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh:ro
      - ./dumps/${POSTGRES_DB_CUSTOMER}.sql:/docker-entrypoint-initdb.d/${POSTGRES_DB_CUSTOMER}.sql:ro
      - ./dumps/${POSTGRES_DB_MODEL}.sql:/docker-entrypoint-initdb.d/${POSTGRES_DB_MODEL}.sql:ro
      - database_storage:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DB_CUSTOMER}, ${POSTGRES_DB_MODEL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  backend:
    container_name: biofood-backend
    build:
      context: ../backend
      target: dev
    ports:
      - 8000:8000
    develop:
      watch:
        - action: sync
          path: ../backend/src
          target: /backend/src
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN_BASE_BACKEND}/${POSTGRES_DB_CUSTOMER}
      MINIO_USER_URL: ${MINIO_USER_URL}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHMS: ${JWT_ALGORITHMS}
    depends_on:
      - database

  cms:
    container_name: biofood-cms
    build: ../cms
    ports:
      - 8005:8000
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN_BASE_BACKEND}/${POSTGRES_DB_CUSTOMER}
    depends_on:
      - database

  s3:
    container_name: biofood-s3
    image: minio/minio
    env_file: .env
    command: |
      server --console-address ":9001" /data
    healthcheck:
      test: mc ready local
      interval: 60s
      start_period: 1s
      timeout: 600s
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  
  s3-setup:
    container_name: biofood-s3-setup
    image: minio/mc
    env_file: .env
    depends_on:
      s3:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    entrypoint:
      /bin/sh -c "
      /usr/bin/mc alias set s3service http://s3:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb s3service/$$S3_BUCKET_NAME;
      /usr/bin/mc anonymous set download s3service/$$S3_BUCKET_NAME;
      /usr/bin/mc admin user svcacct add --access-key "$$S3_ACCESS_KEY" --secret-key "$$S3_SECRET_KEY" s3service $$MINIO_ROOT_USER;
      exit 0;
      "

  datalens-control-api:
    container_name: datalens-control-api
    image: ghcr.io/datalens-tech/datalens-control-api:0.2192.0
    environment:
      BI_API_UWSGI_WORKERS_COUNT: 4
      CONNECTOR_AVAILABILITY_VISIBLE: "clickhouse,postgres,chyt,ydb,mysql,greenplum,mssql,appmetrica_api,metrika_api"
      RQE_FORCE_OFF: 1
      DL_CRY_ACTUAL_KEY_ID: key_1
      DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
      RQE_SECRET_KEY: ""
      US_HOST: "http://datalens-us:8083"
      US_MASTER_TOKEN: "fake-us-master-token"
    depends_on:
      - datalens-us

  datalens-data-api:
    container_name: datalens-data-api
    image: ghcr.io/datalens-tech/datalens-data-api:0.2192.0
    environment:
      GUNICORN_WORKERS_COUNT: 5
      RQE_FORCE_OFF: 1
      CACHES_ON: 0
      MUTATIONS_CACHES_ON: 0
      RQE_SECRET_KEY: ""
      DL_CRY_ACTUAL_KEY_ID: key_1
      DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
      BI_COMPENG_PG_ON: 1

      # CONNECTION TO DATABASE
      BI_COMPENG_PG_URL: ${POSTGRES_DSN_BASE}/${POSTGRES_DB_MODEL}

      US_HOST: "http://datalens-us:8083"
      US_MASTER_TOKEN: "fake-us-master-token"
    depends_on:
      - datalens-us


  datalens-pg-us:
    container_name: datalens-pg-us
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: us_metadata
      POSTGRES_USER: us
      POSTGRES_PASSWORD: us
    volumes:
      - datalens_us_storage:/var/lib/postgresql/data

  datalens-us:
    container_name: datalens-us
    image: ghcr.io/datalens-tech/datalens-us:0.310.0
    depends_on:
      - datalens-pg-us
    environment:
      APP_INSTALLATION: "opensource"
      APP_ENV: "prod"
      MASTER_TOKEN: "fake-us-master-token"
      POSTGRES_DSN_LIST: postgres://us:us@datalens-pg-us:5432/us_metadata
      SKIP_INSTALL_DB_EXTENSIONS: ${METADATA_SKIP_INSTALL_DB_EXTENSIONS:-0}
      USE_DEMO_DATA: 0
      HC: ${HC:-0}
      # NODE_EXTRA_CA_CERTS: /certs/root.crt
    extra_hosts:
      - "host.docker.internal:host-gateway"

  datalens-ui:
    container_name: datalens-ui
    image: ghcr.io/datalens-tech/datalens-ui:0.2601.0
    ports:
      - ${UI_PORT:-9999}:8080
    depends_on:
      - datalens-us
      - datalens-control-api
      - datalens-data-api
    environment:
      APP_MODE: "full"
      APP_ENV: "production"
      APP_INSTALLATION: "opensource"
      AUTH_POLICY: "disabled"
      US_ENDPOINT: "http://datalens-us:8083"
      BI_API_ENDPOINT: "http://datalens-control-api:8080"
      BI_DATA_ENDPOINT: "http://datalens-data-api:8080"
      US_MASTER_TOKEN: "fake-us-master-token"
      NODE_EXTRA_CA_CERTS: "/usr/local/share/ca-certificates/cert.pem"
      HC: ${HC:-0}

volumes:
  database_storage:
    name: biofood_database_storage
  minio_storage:
    name: biofood_minio_storage
  datalens_us_storage:
    name: datalens_us_storage

